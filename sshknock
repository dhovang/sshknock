#!/usr/bin/python3

# Simple sshd port knocking (C) Dan Hovang 2019

# Usage:
#  To start as server, run as root:
#   sshknock server
#
#  To operate as client, use:
#   sshknock [host] [password]

# Configuration section - change to a password of your liking!

PASSWORD = 'change_me_ffs'

DB_FILE = "/var/run/knock"
LOG_IDENT = 'sshknock'

# Time in seconds for maximum clock drift between client and server

GRACE_TIME = 5 * 60

# Seconds that the host will be open in the firewall

PORT_OPEN_FOR = 60 * 60 * 24

# Name of iptables user chain where rules are stored

CHAIN_NAME = 'spa-open'

# Code ..

import os
import re
import sys
import dbm
import time
import socket
import random
import hashlib
import syslog
import binascii
import subprocess
import traceback
from select import select

INVOKE_RULE = [ 'INPUT', '-p', 'tcp', '--dport', '22', '-j', CHAIN_NAME ]

def log(msg):
  syslog.openlog(LOG_IDENT)
  syslog.syslog(msg)

def log_auth(msg):
  syslog.openlog(LOG_IDENT, 0, syslog.LOG_AUTH)
  syslog.syslog(msg)

def error(msg):
  sys.stderr.write(msg)

def iptables(args = None):
  rc = 0
  res = ""
  try:
    cmd = [ 'iptables' ]
    if args:
      cmd.extend(args)
    res = subprocess.check_output(cmd)
  except subprocess.CalledProcessError as e:
    rc = e.returncode
    res = e.output

  return (rc, res)


# Make sure our chain exists

def iptables_setup():

  # Create user defined chain

  rc, res = iptables([ '-L', CHAIN_NAME, '-vn' ])
  if rc != 0:
    rc, res = iptables([ '-N', CHAIN_NAME ])

  # Make sure it's invoked

  cmd = [ '-C' ]
  cmd.extend(INVOKE_RULE)
  rc, res = iptables(cmd)
  if rc == 1:
    cmd = [ '-I' ]
    cmd.extend(INVOKE_RULE)
    rc, res = iptables(cmd)

def iptables_clear():
  rc, res = iptables([ '-F', CHAIN_NAME ])

def host_rule(ip):
  return [ CHAIN_NAME, '-s', ip, '-p', 'tcp', '--dport', '22', '-j', 'ACCEPT' ]

def iptables_add(ip):
  cmd = [ '-C' ]
  cmd.extend(host_rule(ip))
  rc, res = iptables(cmd)
  if rc == 0:
    return
  cmd = [ '-A' ]
  cmd.extend(host_rule(ip))
  rc, res = iptables(cmd)

def iptables_del(ip):
  cmd = [ '-D' ]
  cmd.extend(host_rule(ip))
  rc, res = iptables(cmd)

def build_packet_from(password, time32, rand):
  tm = "%016x" % time32
  rnd = "%016x" % rand
  h = binascii.hexlify(hashlib.pbkdf2_hmac('sha256', password.encode(), ("%s%s" % (tm, rnd)).encode(), 16384))
  pkt = "%s,%s,%s" % (tm, rnd, h.decode('utf-8'))
  return pkt

def build_packet(password):
  time32 = int(time.time() * 100)
  rand = int(random.getrandbits(64))
  return build_packet_from(password, time32, rand)

def get_packet_tm(data):
  return int("0x%s" % data.split(',')[0], 16)


def process_packet(data, addr, password):
  ip = str(addr[0])
  tm, rnd, h_in = data.split(',')

  # Check hash to password

  h = binascii.hexlify(hashlib.pbkdf2_hmac('sha256', password.decode(), "%s%s" % (tm, rnd), 16384))

  if h != h_in:
    log_auth("bad hash from %s" % ip)
    return False

  # Allow 5 minutes drift / latency

  tm_int = get_packet_tm(data)
  tm_limit = int((time.time() - GRACE_TIME) * 100)

  if tm_int < tm_limit:
    log_auth("too old packet rejected from %s" % ip)
    return False

  # Update database

  db = dbm.open(DB_FILE, "c")
  db[ip] = data
  db.close()

  iptables_add(ip)

  log_auth("%s successfully authenticated" % ip)

  return True

def send_udp_message(data, ip, port = 7776):
  sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
  sock.sendto(data.encode(), (ip, port))


def cleanup():

  # TODO delete rules that is not in database

  db = dbm.open(DB_FILE, "c")
  now = time.time() * 100
  for k in db.keys():
    data = db[k]
    tm = get_packet_tm(data)
    age = now - tm

    if age > (PORT_OPEN_FOR * 100):
      iptables_del(k)
      del db[k]
      log_auth("%s expired" % k)

  db.close()


def run_server(port = 7776):

  log('starting')

  # Setup iptables

  iptables_setup()

  # Create UDP socket

  sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
  sock.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
  sock.settimeout(5)
  sock.bind(("0.0.0.0", port))

  log("listening to requests on port %d" % port)

  # Wait for inbound message

  while True:
    cleanup()
    try:
      data, addr = sock.recvfrom(1024)
      if data:
        process_packet(data, addr, PASSWORD)
    except socket.timeout:
      pass
    except KeyboardInterrupt:
      break
    except:
      log('caught exception')
      time.sleep(5)

def netcat(host, port):

  bufsize = 512
  try:
    ipaddr = socket.gethostbyname(host)
  except:
    error("error: %s unknown\n" % host)
    return

  fno_in = sys.__stdin__.fileno()
  fno_out = sys.__stdout__.fileno()

  sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
  sock.connect((ipaddr, port))

  _infd = [ fno_in, sock.fileno() ]
  _outfd = []
  _excfd = [ fno_in, fno_out, sock.fileno() ]

  while True:

    _in, _out, _exc = select(_infd, _outfd, _excfd)
    for fno in _in:
      if fno == fno_in:
        data = os.read(fno_in, bufsize)
        if not data: # EOF?
          return
        sock.send(data)
      elif fno == sock.fileno():
        data = sock.recv(bufsize)
        if not data:
          return
        os.write(fno_out, data)
      else:
        error("BORK! %d" % fno)
        return

    if len(_exc) > 0:
      error("error: %s" % _exc)
      return


def run_client():

  host = sys.argv[1]
  password = sys.argv[2]

  if not re.match('[0-9]+\\.[0-9]+\\.[0-9]+\\.[0-9]+', host):
    try:
      res = socket.gethostbyname(host)
    except:
      error("can not find host %s" % host)
      sys.exit(1)
    ip = res
  else:
    ip = host

  pkt = build_packet(password)
  send_udp_message(pkt, ip)

  if len(sys.argv) >= 4:
    ncport = int(sys.argv[3])
    if len(sys.argv) == 5:
      nc_delay = int(sys.argv[4])
    else:
      nc_delay = 200
    time.sleep(nc_delay / 1000)
    netcat(host, ncport)

# Start

if len(sys.argv) == 2 and sys.argv[1] == 'server':
  run_server()
  sys.exit(0)

if len(sys.argv) == 2 and sys.argv[1] == 'test':
  time = 164992061138 #int(time.time() * 100)
  random = 14171775276828072369 #long(random.getrandbits(64))
  password = "my_password123"
  packet = build_packet_from(password, time, random)
  print("time: %s" % time)
  print("rand: %s" % random)
  print("packet: %s" % packet)
  print("expect: %s" % "000000266a4b0ed2,c4ac42876c0019b1,652a5a0d9536fa348686d5d96a313663cb008f7a887709230412f62eb2194af5")
  sys.exit(0)

if not len(sys.argv) in (3, 4, 5):
  print("Usage:")
  print(" sshknock host password [nc_port] [nc_delay = 200]")
  print("  Providing a nc_port will start a netcat to host:nc_port nc_delay milliseconds after SPA is sent")
  print("  If no nc_delay is given, but nc_port is, default delay is 200ms")
  print("  If no nc_port is given, knocker will exit immediately after SPA packet is sent")
  print("or to start server:")
  print(" sshknock server")
  sys.exit(0)

run_client()
